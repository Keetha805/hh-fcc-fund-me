{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\ncontract FundMe {\n  using PriceConverter for uint256;\n\n  mapping(address => uint256) public s_addressToAmount;\n  address[] public s_funders;\n  address private immutable i_owner;\n  uint256 constant MINIMUM_USD = 50 * 1e18;\n  AggregatorV3Interface public s_priceFeed;\n\n  event Funded(address indexed from, uint256 amount);\n\n  modifier onlyOwner() {\n    // require(msg.sender == i_owner, \"Sender is not the owner!\");\n    if (msg.sender != i_owner) {\n      revert FundMe__NotOwner();\n    }\n    _;\n  }\n\n  constructor(address priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n  }\n\n  receive() external payable {\n    fund();\n  }\n\n  fallback() external payable {\n    fund();\n  }\n\n  function fund() public payable {\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n      \"Didnt send enough\"\n    );\n    s_funders.push(msg.sender);\n    s_addressToAmount[msg.sender] += msg.value;\n  }\n\n  //withdraw funds\n\n  //transfer\n  //2300 gas error\n  // payable(msg.sender).transfer(address(this).balance);\n\n  //send\n  //2300 gas bool\n  // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n  // require(sendSuccess, \"Send failed!\");\n\n  //call\n  //no error, returns bool\n  function withdraw() public onlyOwner {\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < s_funders.length;\n      funderIndex++\n    ) {\n      address funder = s_funders[funderIndex];\n      s_addressToAmount[funder] = 0;\n    }\n    s_funders = new address[](0);\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed!\");\n  }\n\n  function cheaperWithdraw() public payable onlyOwner {\n    address[] memory funders = s_funders;\n    //mappings cant be in memory\n    for (\n      uint256 fundersIndex = 0;\n      fundersIndex < funders.length;\n      fundersIndex++\n    ) {\n      address funder = funders[fundersIndex];\n      s_addressToAmount[funder] = 0;\n    }\n    s_funders = new address[](0);\n    (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\n    require(success, \"Call failed!\");\n  }\n\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n\n  function getOwner() public view returns (address) {\n    return i_owner;\n  }\n\n  function getFunders() public view returns (address[] memory) {\n    return s_funders;\n  }\n\n  function getAddressToAmount(address funder) public view returns (uint256) {\n    return s_addressToAmount[funder];\n  }\n}\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(\n    AggregatorV3Interface priceFeed\n  ) public view returns (uint256) {\n    //->working with oracles needs tests in testnets\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    return uint256(price * 1e10);\n  }\n\n  function getConversionRate(\n    uint256 ethAmount,\n    AggregatorV3Interface priceFeed\n  ) internal view returns (uint256) {\n    uint256 price = getPrice(priceFeed);\n    uint256 ethAmountUsd = (price * ethAmount) / 1e18;\n\n    return ethAmountUsd;\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}